import {DIContainer} from "@wessberg/di";
import {CodeAnalyzer, ICodeAnalyzer} from "@wessberg/codeanalyzer";
import {IDIConfig} from "./di-config/i-di-config";
import {diConfig} from "./di-config/di-config";
import {IDICompilerBase} from "./di-compiler/i-di-compiler-base";
import {DICompilerBase} from "./di-compiler/di-compiler-base";
import {IDICompiler} from "./di-compiler/public/i-di-compiler";
import {DICompiler} from "./di-compiler/public/di-compiler";
import {IConstructorArgumentService} from "./service/constructor/i-constructor-argument-service";
import {ConstructorArgumentService} from "./service/constructor/constructor-argument-service";
import {IContainerService, IContainerServiceConstructor} from "./service/container/i-container-service";
import {ContainerService} from "./service/container/container-service";
import {IExpressionFinderService} from "./service/expression-finder/i-expression-finder-service";
import {ExpressionFinderService} from "./service/expression-finder/expression-finder-service";
import {ExpressionValidatorService} from "./service/expression-validator/expression-validator-service";
import {IExpressionValidatorService} from "./service/expression-validator/i-expression-validator-service";
import {ExpressionUpdaterService} from "./service/expression-updater/expression-updater-service";
import {IExpressionUpdaterService} from "./service/expression-updater/i-expression-updater-service";

DIContainer.registerSingleton<ICodeAnalyzer, CodeAnalyzer>();
DIContainer.registerSingleton<IDIConfig, IDIConfig>(() => diConfig);
DIContainer.registerSingleton<IDICompilerBase, DICompilerBase>();
DIContainer.registerSingleton<IDICompiler, DICompiler>();
DIContainer.registerSingleton<IConstructorArgumentService, ConstructorArgumentService>();
DIContainer.registerSingleton<IExpressionFinderService, ExpressionFinderService>();
DIContainer.registerSingleton<IExpressionValidatorService, ExpressionValidatorService>();
DIContainer.registerSingleton<IExpressionUpdaterService, ExpressionUpdaterService>();
DIContainer.registerSingleton<IContainerService, ContainerService>();
DIContainer.registerSingleton<IContainerServiceConstructor, IContainerServiceConstructor>(() => ContainerService);